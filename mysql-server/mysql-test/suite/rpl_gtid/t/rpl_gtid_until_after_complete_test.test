#
# ==== Purpose ====
#
# The following test verifies that SQL_AFTER_GTIDS works correctly with
# different option.
#
# === Implementation ====
#
# 1. REPLICATE ALL SOURCE DATA
# 2. DATA IS ALREADY PRESENT
# 3. REPLICATE WAITING ON A SINGLE GTID
# 4. REPLICATE SUBSET OF SOURCE DATA WITH OVERLAPPING UUID
# 5. REPLICATE WAITING ON A NON PRESENT TRANSACTION
# 6. REPLICATE WAITING ON A NON PRESENT TRANSACTION WITH A SINGLE GTID
# 7. REPLICATE UUID NOT PRESENT WITH DATA INCOMING
# 8. Cleanup
#
# === References ===
#
# WL#15755: MAKE SQL_AFTER_GTIDS WORK WITH MTS
#

--source include/master-slave.inc

## GTID:1
--let $source_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
CREATE TABLE t1(c1 INTEGER);
--source include/sync_slave_sql_with_master.inc
--source include/stop_slave.inc

--echo
--echo ##############################################################
--echo # 1. REPLICATE ALL SOURCE DATA

--source include/rpl_connection_master.inc

## GTID:1-4
--let $i=2
while ($i != 5)
{
  --eval INSERT INTO t1 VALUES($i)
  --inc $i
}

--source include/rpl_connection_slave.inc

--replace_result $source_uuid SOURCE_UUID
--eval START REPLICA SQL_THREAD, IO_THREAD UNTIL SQL_AFTER_GTIDS="$source_uuid:1-4"
--source include/wait_for_slave_sql_to_stop.inc

--let $assert_cond= COUNT(*)=3 FROM t1
--let $assert_text= 3 rows in t1 must be replicated now
--source include/assert.inc

--echo
--echo ##############################################################
--echo # 2. DATA IS ALREADY PRESENT

--source include/rpl_connection_slave.inc

--replace_result $source_uuid SOURCE_UUID
--eval START REPLICA SQL_THREAD, IO_THREAD UNTIL SQL_AFTER_GTIDS="$source_uuid:1"
--source include/wait_for_slave_sql_to_stop.inc

--let $assert_cond= COUNT(*)=3 FROM t1
--let $assert_text= 3 rows in t1 must be replicated now
--source include/assert.inc

--echo
--echo ##############################################################
--echo # 3. REPLICATE WAITING ON A SINGLE GTID

--source include/rpl_connection_master.inc

## GTID:1-8
--let $i=5
while ($i != 9)
{
  --eval INSERT INTO t1 VALUES($i)
  --inc $i
}

--source include/rpl_connection_slave.inc

# Note: Transaction GTID:8 is not replicated
--replace_result $source_uuid SOURCE_UUID
--eval START REPLICA SQL_THREAD, IO_THREAD UNTIL SQL_AFTER_GTIDS="$source_uuid:7"
--source include/wait_for_slave_sql_to_stop.inc

--let $assert_cond= COUNT(*)=6 FROM t1
--let $assert_text= 6 rows in t1 must be replicated now
--source include/assert.inc

--echo
--echo ##############################################################
--echo # 4. REPLICATE SUBSET OF SOURCE DATA WITH OVERLAPPING UUID

## GTID:1-9
--source include/rpl_connection_master.inc
INSERT INTO t1 VALUES(9);

--source include/rpl_connection_slave.inc

# Note: Transaction GTID:9 is not replicated
--replace_result $source_uuid SOURCE_UUID
--eval START REPLICA SQL_THREAD, IO_THREAD UNTIL SQL_AFTER_GTIDS="$source_uuid:1-8"
--source include/wait_for_slave_sql_to_stop.inc

--let $assert_cond= COUNT(*)=7 FROM t1
--let $assert_text= 7 rows in t1 must be replicated now
--source include/assert.inc

--echo
--echo ##############################################################
--echo # 5. REPLICATE WAITING ON A NON PRESENT TRANSACTION

--source include/rpl_connection_slave.inc

--replace_result $source_uuid SOURCE_UUID
--eval START REPLICA SQL_THREAD, IO_THREAD UNTIL SQL_AFTER_GTIDS="$source_uuid:1-10"

# Channel is still running since all GTIDs have not been received.
--source include/check_slave_is_running.inc

--source include/rpl_connection_master.inc

## GTID:1-10
--let $i=10
while ($i != 11)
{
  --eval INSERT INTO t1 VALUES($i)
  --inc $i
}

--source include/rpl_connection_slave.inc

--source include/wait_for_slave_sql_to_stop.inc

--let $assert_cond= COUNT(*)=9 FROM t1
--let $assert_text= 9 rows in t1 must be replicated now
--source include/assert.inc

--echo
--echo ##############################################################
--echo # 6. REPLICATE WAITING ON A NON PRESENT TRANSACTION WITH A SINGLE GTID

--source include/rpl_connection_slave.inc

--replace_result $source_uuid SOURCE_UUID
--eval START REPLICA SQL_THREAD, IO_THREAD UNTIL SQL_AFTER_GTIDS="$source_uuid:11"

# Channel is still running since all GTIDs have not been received.
--source include/check_slave_is_running.inc

--source include/rpl_connection_master.inc

## GTID:1-11
INSERT INTO t1 VALUES(11);

--source include/rpl_connection_slave.inc

--source include/wait_for_slave_sql_to_stop.inc

--let $assert_cond= COUNT(*)=10 FROM t1
--let $assert_text= 10 rows in t1 must be replicated now
--source include/assert.inc

--echo
--echo ##############################################################
--echo # 7. REPLICATE UUID NOT PRESENT WITH DATA INCOMING

--source include/rpl_connection_slave.inc

--replace_result $source_uuid SOURCE_UUID
--eval START REPLICA SQL_THREAD, IO_THREAD UNTIL SQL_AFTER_GTIDS="$source_uuid:20"

--source include/rpl_connection_master.inc

## GTID:1-15
--let $i=12
while ($i != 16)
{
  --eval INSERT INTO t1 VALUES($i)
  --inc $i
}

--source include/rpl_connection_slave.inc

--source include/rpl_sync.inc

--let $assert_cond= COUNT(*)=14 FROM t1
--let $assert_text= 14 rows in t1 must be replicated now
--source include/assert.inc

# Channel is still running since all GTIDs have not been received.
--source include/check_slave_is_running.inc

--source include/rpl_connection_master.inc

## GTID:1-20
--let $i=16
while ($i != 21)
{
  --eval INSERT INTO t1 VALUES($i)
  --inc $i
}

--source include/rpl_connection_slave.inc

--source include/wait_for_slave_sql_to_stop.inc

--let $assert_cond= COUNT(*)=19 FROM t1
--let $assert_text= 19 rows in t1 must be replicated now
--source include/assert.inc

--echo
--echo ##############################################################
--echo # 8. Cleanup

--source include/rpl_connection_master.inc
DROP TABLE t1;
--source include/rpl_connection_slave.inc
--source include/start_slave_sql.inc
--source include/rpl_end.inc
